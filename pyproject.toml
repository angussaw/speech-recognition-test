[project]
name = "project_name"
version = "0.1.0"
description = "Project Name"
authors = [{ name = "Member A"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn>=0.31.1",
    "python-dotenv>=1.0.1",
    "pydantic-settings>=2.6.0",
    "python-json-logger>=2.0.7",
    "tqdm>=4.67.0",
    "pyyaml>=6.0.2",
    "pydantic>=2.10.3",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.5.1",
    "black>=23.7.0",
    "isort>=5.12.0",
    "ruff>=0.0.291",
    "pre-commit>=3.4.0",
    "detect-secrets==1.5.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.6.1",
    "testcontainers>=4.8.2",
    "faker>=33.1.0",
]

[tool.ruff]
target-version = "py311"
exclude = ["venv", ".venv", "build", "dist", "tests"]
line-length = 88

select = [
    "E",       # pycodestyle errors
    "F",       # pyflakes
    "I",       # isort
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "UP",      # pyupgrade
    "ARG",     # Unused function arguments
]
ignore = [
    "E501",    # Line too long (handled by black)
    "B008",    # Function calls in default arguments
    "W191",    # Indentation contains tabs
    "B904",    # Raising exceptions without 'from' clause
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
pythonpath = [
    ".",
    "backend"
]
testpaths = ["backend/tests"]
python_files = "test_*.py"
markers = [
    "integration: marks tests as integration tests",
]
